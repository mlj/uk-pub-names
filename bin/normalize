#!/usr/bin/env ruby

class String
  def titlecase!
    self[0] = self[0].upcase
    nil
  end

  def titlecase
    s = self.dup
    s.titlecase!
    s
  end
end

def chop_string(name, regexp, strings)
  if name.sub!(regexp, '')
    n = strings.select { |s| s.downcase == $1.downcase }
    STDERR.puts "Multiple prefix/suffix normalisations possible: #{n.join(', ')}" if n.size > 1
    [n.first, name]
  else
    [nil, name]
  end
end

def normalise_name(name)
  case (name || '').gsub(/\s+/, ' ').strip
  when /^\s*$/
    nil
  when 'Closed pub', 'Closed', '?', '??? & Anchor'
    nil
  else
    name.gsub('’', '\'')
        .sub(/\s*\([^\)]+\)\s*$/, '')
        .sub(/^\s*\([^\)]+\)\s*/, '')
        .sub('Formerly The Fox Inn now a private residence', 'The Fox Inn')
        .sub(/^Former 'Sycamore'/, 'Sycamore')
        .sub(/^(Form site of|Former|Closed:)\s*/, '')
        .sub(' CLOSED', '')
        .sub(' (Inn on the Estuary', '')
        .sub('/closed for sale', '')
        .sub(/ - (CURRENTLY CLOSED|J ?D Wetherspoon|Microbrewery)$/i, '')
        .sub(/\s*-\s*(being refurbished|closed\s*\d*)\s*/i, '')
        .sub(/\s*[\[\(]\s*(closed down|now closed|closed long-term|private members|open again|pub|ex-Masons|no longer open|site of|being renn?ovated|wine bar|demolished|open for business|no longer open|clo?se?d\s*\d*\??|derelict|demolished|disused)\s*[\]\)]\s*$/i, '')
        .sub(/ \((JD |J\.D\. )?[Ww]ea?therspoons?\)$/, '')
        .sub(' - Wetherspoon', '')
        .sub('J D Wetherspoon --', '')
        .sub(/ ?[-\(] ?(Beefeater|Brewster Bears|Jos(ep|pe)h Holts|Toby Carvery|J\.W\. Lees|Brewers Fayre|The Idle Brewery|Everards) ?\)? ?$/, '')
        .sub(/ Café/i, ' Cafe')
        .sub(/ PH$/i, ' Public House')
        .sub(/['oO]+ ?(Bells|Nails)/, 'o\' \1')
        .sub('Yewtree', 'Yew Tree')
        .gsub(/\b('?[a-z])/) { $1.capitalize }          # Titlecase everything
        .gsub(/\b(at|of|on|in|with|the|and|or)\b/i) { |s| s.downcase } # Lowercase function words
        .gsub(/ A /, ' a ')
        .gsub(/St\. /i, 'St ')                          # Spell "St." (Saint/street) as "St"
        .gsub('&', ' and ')
        .gsub(/\bthje\b/i, 'the')                       # 'thje' is a repeated typo
        .gsub(/\btwo\b/i, '2')                          # Convert numerals to digits
        .gsub(/\bthree\b/i, '3')
        .gsub(/\bfour\b/, '4')
        .gsub(/\bfive\b/, '5')
        .gsub(/\bsix\b/, '6')
        .gsub(/(Number|No\.?|Nº)\s*(\d+)/, 'Number \2')
        .gsub(/\s+/, ' ')
        .strip
        .gsub(/^[a-z]/) { |s| s.upcase }
  end
end

%w(ORIGINAL_NAME NORMALISED_NAME ID LAT LON).join("\t")

ARGV.each do |file_name|
  File.open(file_name).each_line do |l|
    l.chomp!

    name, id, lat, lon = l.split("\t")
    normalised_name = normalise_name(name)

    unless normalised_name.nil?
      puts [name, normalised_name, id, lat, lon].join("\t")
    end
  end
end
